<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Geeky Nuggets</title>
    <description>Jonathan Foucher's blog &lt;span class=&quot;amp&quot;&gt;&amp;amp;&lt;/span&gt; web development notebook</description>
    <link>https://jfoucher.com/</link>
    <atom:link href="https://jfoucher.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 15 Aug 2017 17:29:42 +0200</pubDate>
    <lastBuildDate>Tue, 15 Aug 2017 17:29:42 +0200</lastBuildDate>
    <generator>Jekyll v3.3.1</generator>
    
      
      <item>
        <title>One project per month during 2017. Here are my first two for January and february</title>
        <description>&lt;p&gt;So at the start of January I discovered the &lt;a href=&quot;https://github.com/1ppm/1ppmLog&quot;&gt;One Project per Month&lt;/a&gt; project, and decided to give it a go. You can follow my progress &lt;a href=&quot;https://github.com/1ppm/1ppmLog/blob/master/HallOfFame.md#jfoucher&quot;&gt;here&lt;/a&gt; and I’ll also try to post here somewhat regularly about my experiences.&lt;/p&gt;

&lt;p&gt;The first project was an app that does &lt;a href=&quot;https://budgt.eu&quot;&gt;budget tracking&lt;/a&gt;. Well, not really budgeting, more like to track what I was spending. I’ve been wondering where all the money went, and this app was made to help me achieve some visibility about that. It’s great, &lt;a href=&quot;https://budgt.eu&quot;&gt;check it out&lt;/a&gt; ! If the queen of england needed a way to track her spending, she told me she’d definitely use it !&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/queen-says-budgt-is-best-tracking-app.jpeg&quot; alt=&quot;Queen of England says budgt is the best app to track your spending&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Not that you care, but if you did you could go to the &lt;a href=&quot;https://github.com/jfoucher/budgetTracker&quot;&gt;github repo&lt;/a&gt; and there you might be able to find out that it was made with React, PouchDB and quite a few more nice things.&lt;/p&gt;

&lt;p&gt;Anyway, the second project was the February one (that’s what one per month means, for all of you following from your nursing home bed). I wanted to try my hand at native iOS apps. I looked at the Swift docs, installed Xcode but then I saw got bored and saw on hackernews that someone had built an app with react native and liked, so I said to myself : “Jonathan : do the right and be lazy. The important thing is to get this ready before the 28th” (Yes February was limited to 28 days by royal decree this year, and well, most years really… Who knows why ?) Anyway, so since &lt;a href=&quot;http://blogoscoped.com/archive/2005-08-24-n14.html&quot;&gt;all good programmers are lazy&lt;/a&gt; I didn’t feel too bad about myself.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/posts/become-lazy.jpeg&quot; alt=&quot;One does not simply become lazy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So react-native is was then. Let me tell you, this thing is great ! It works perfectly, you can design stuff with CSS like ease, and all the logic is in javascript. Easy peasy. You can’t get it anywhere though because Apple wants 100€ so that I can upload my free app. But do come by my house and I’ll gladly install it on your phone. If you have an android maybe I’ll just keep for a little while to do a bit of testing. But I’ll give it back. Eventually.&lt;/p&gt;

&lt;p&gt;So yes. So far so good. No idea for March though. Maybe I’ll just do a react-native app for the &lt;a href=&quot;https://budgt.eu&quot;&gt;budget tracker&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Any ideas ? &lt;a href=&quot;/contact&quot;&gt;Contact me&lt;/a&gt;.&lt;/p&gt;
</description>
        
          <description>This year I decided to try and develop one prject every month. Here's how January and February went</description>
        
        <pubDate>Wed, 01 Mar 2017 09:17:07 +0100</pubDate>
        <link>https://jfoucher.com/2017/03/one-project-per-month-first-budget-tracking.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2017/03/one-project-per-month-first-budget-tracking.html</guid>
        
        <category>javascript</category>
        
        <category>project</category>
        
        <category>web</category>
        
        
      </item>
      
    
      
      <item>
        <title>Building a webGL and webworkers boat hydrostatics app</title>
        <description>&lt;p&gt;I’ve recently felt the urge to start designing boats again, as I have had some ideas I wanted to explore, specifically for boats of the &lt;a href=&quot;http://classemini.org&quot;&gt;Mini 650 class&lt;/a&gt;. The software I use has basic hydrostatics capabilities, but only for an upright boat. It cannot calculate the GZ curve, or get the righting moment at specific heel angles, which is a crucial data for the kind of craft I wanted to design.&lt;/p&gt;

&lt;p&gt;Existing solutions are extremely powerful and extremely expensive, so I decided i’d spend a few days rolling my own, with only the features I needed for the time being. I have all the technical background for this type of calculations, so I figured it shouldn’t be too hard. I really wanted to display a 3D view of the model, and not have it only output data in table format, and since I had never used web GL and was curious about, I figured it was the perfect time to try it out. Pro tip : if you’re not used to openGL or working in 3D programatically, use &lt;a href=&quot;https://threejs.org/&quot;&gt;three.js&lt;/a&gt;. Thank me later.&lt;/p&gt;

&lt;p&gt;So at first I built something very basic that just displayed the model in threejs and did some static calculations, in the UI thread. At first it worked ok, but as soon as I added functionality to solve for trim (to align longitudinal center of gravity with the longitudinal center of buoyancy) it started to get very slow. The 3D view could not even be moved around anymore because the UI thread was doing all the calculations in the foreground. Basically to do this kind of calculations, you have to move the model up and down to adjust for the correct displacement, and then pitch it forwards or aft until the center of buoyancy aligns with the center of gravity. This loop is computationally intensive and made everything grind to a halt.&lt;/p&gt;

&lt;p&gt;So webworkers to the rescue. I had never really used them either, but they promised to make it easy to send most of the work to a background thread that would not slow down my UI. I refactored my code to put all the heavy lifting into separate files that could then be called as a web worker. I also had to add messaging to pass data to and from the UI javascript. That was fairly easy to do, as they are simple calls to postMessage, and a callback function in the UI and the worker to receive sent messages. Very easy and obvious, so great !&lt;/p&gt;

&lt;p&gt;The calculations are accurate, I’ve had them checked in many cases against an old Hydromax version, which is an established solution in the field, and the results match within about a percentage point. The only difficulty I’m still struggling with is to properly draw the underwater stations and the waterline, but this is only a display bug and does not affect the results. What happens is that there are many edge cases that have to be accounted for, depending on the type and quality of the input file. I’m still working on that.&lt;/p&gt;

&lt;p&gt;If you like designing boats and currently do these kinds of calculations by hand or in a spreadsheet, or if your current software does not solve for trim, you will definitely want to &lt;a href=&quot;https://hydro.marinetechs.com/?utm_source=jfoucher&amp;amp;utm_campaign=launch&amp;amp;utm_medium=blog&quot;&gt;give this tool a try&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you do, and you like it, or you hate it, or it doesn’t work, or anything, your feedback would be invaluable. Contact me &lt;a href=&quot;mailto:j_foucher@marinetechs.com&quot;&gt;by email&lt;/a&gt; or through &lt;a href=&quot;/contact&quot;&gt;this blog’s contact form&lt;/a&gt;.&lt;/p&gt;
</description>
        
          <description>I had a need for a simple program to do some calculations for a boat design I'm studying, so I built it from scratch with webGL and webworkers.</description>
        
        <pubDate>Tue, 20 Dec 2016 09:17:07 +0100</pubDate>
        <link>https://jfoucher.com/2016/12/webGL-webworkers-boat-calculations.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2016/12/webGL-webworkers-boat-calculations.html</guid>
        
        <category>javascript</category>
        
        <category>webgl</category>
        
        <category>webworker</category>
        
        <category>yachtdesign</category>
        
        
      </item>
      
    
      
      <item>
        <title>How I built running shoes for my whole family in one sunday afternoon (Huarache sandals)</title>
        <description>&lt;p&gt;Some time ago, &lt;a href=&quot;http://diegosantamarta.com&quot;&gt;Diego Santamarta&lt;/a&gt; casually mentioned that the shoes he was wearing were not regular flip flops, but rather some kind of sandal which I had never heard about. “Oh ok” was my less than enthusiastic answer. In the meantime, and even before, I had been reading about barefoot running, even though I had never run more than a few hundred meters without panting uncontrollably. Yes, 15 years smoking does take it’s toll. After two years tobacco free, I feel I’m only now starting to recover.&lt;/p&gt;

&lt;p&gt;Anyway, I had dismissed barefoot running as something that I would love to do — and probably the only way that I would ever run for pleasure — but that seemed very uncomfortable bordering on dangerous. Two days ago, that same Diego Santamarta posts to facebook a link about those sandals as used by barefoot runners to protect their feet on difficult terrain.&lt;/p&gt;

&lt;h3 id=&quot;documentation-and-materials&quot;&gt;Documentation and materials&lt;/h3&gt;

&lt;p&gt;I almost immediately started &lt;a href=&quot;http://bit.ly/10znWIx&quot;&gt;reading about them&lt;/a&gt;, watching &lt;a href=&quot;http://bit.ly/10WcB48&quot;&gt;youtube videos&lt;/a&gt; or &lt;a href=&quot;http://bit.ly/10zo22R&quot;&gt;instructables&lt;/a&gt; explaining how to build them. I had an old tire in the growing “to throw away” pile which I never get around to bringing to the recycling center, so that was the main part of the material sorted. I also have some polypropylene cord (the blue one used to tie straw bales and some black one) which could be used as laces. As will be seen later this is not comfortable nor durable so I used some more elaborate string for the laces.&lt;/p&gt;

&lt;p&gt;Trace your foot on paper and locate the holes as indicated in one of these guides.&lt;/p&gt;

&lt;h3 id=&quot;cutting-the-sole&quot;&gt;Cutting the sole&lt;/h3&gt;

&lt;p&gt;Now the real work begins. We will need to hack at that tire, and it truly is tiresome work. I had some tin snips on hand which I thought would be perfect for  the job. They are in fact totally useless. I did the job with a hacksaw to cut through the metal ring where the tire meets the wheel, and then one of my trusty &lt;a href=&quot;https://en.wikipedia.org/wiki/Opinel&quot;&gt;Opinels&lt;/a&gt; to cut through the reinforced rubber outwall. If the knife is kept sharp, this is actually fairly easy work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jfoucher.com/uploads/2013/05/cutting-tire.jpg&quot; alt=&quot;&amp;quot;Cutting the tire&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I cut some rough pieces from the outerwall, one from each side of the tire to match the curvature of the outerwall to the natural curve of each foot.&lt;/p&gt;

&lt;p&gt;You then trace the outline of your paper pattern on the pieces you just cut, enabling you to have perfect tire soles for your huarache sandals.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jfoucher.com/uploads/2013/05/cutting-soles.jpg&quot; alt=&quot;&amp;quot;Matching sole to template&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I then used a small drill bit, around 5mm to drill the holes.&lt;/p&gt;

&lt;h3 id=&quot;putting-the-laces-in-places&quot;&gt;Putting the laces in places&lt;/h3&gt;

&lt;p&gt;The are many lacing systems that can be used, the one I used seemed simple enough, and can be slipped on and off easily.&lt;/p&gt;

&lt;p&gt;To pull the string through the holes, I used a piece of bent wire as a threader, and pliers to pull on it if need be. A &lt;a href=&quot;http://en.wikipedia.org/wiki/Figure-eight_knot&quot;&gt;figure of 8 knot&lt;/a&gt; locks the string in the toe hole. the string then goes throught the outer hole, around the heel, through the inner whole, and ties around the front part of the lace&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jfoucher.com/uploads/2013/05/threading-cord.jpg&quot; alt=&quot;&amp;quot;Threading the cord&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the result: my son’s sandals. He complained that they were not very comfortable though, so I changed the cord (which was too thin) and used a thicker braided one I had around, which is much more comfortable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://jfoucher.com/uploads/2013/05/huarache-running-sandal-kid.jpg&quot; alt=&quot;&amp;quot;Huarache running sandal complete&amp;quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once everyone had their sandals ready, I decided to go for a short run to try them out&lt;/p&gt;

&lt;h3 id=&quot;running&quot;&gt;Running&lt;/h3&gt;

&lt;p&gt;Please keep in mind that I was a heavy smoker for many years, have &lt;em&gt;never&lt;/em&gt; run unless obligated to, and never more than a few hundred meters.&lt;/p&gt;

&lt;p&gt;The first segment was downhill, and I had to readjust the shoes almost immediately, for the only time in the entire run.&lt;/p&gt;

&lt;p&gt;When I arrived at the first uphill segment I got out of breath quickly and decide to alternate running and fast walking for the rest of the outing. That worked out pretty good, and the running actually felt easier and easier. The shoes are superb. They are pretty comfortable, provide just the right amount of protection to avoid having to look out for every little piece of gravel and can be used to cross streams without fear of them becoming slippery.&lt;/p&gt;

&lt;p&gt;My calves started hurting at around the ten minute mark, I think from landing on the front portion of the feet. It only got worse from then on, and now I can barely walk, it feels like I have a continuous cramp in these muscles. The feet are in perfect condition though, I just feel that they have had a good workout.&lt;/p&gt;

&lt;p&gt;Can’t wait to go out tomorrow for more!&lt;/p&gt;
</description>
        
          <description>I never run unless forced to, but today I decided to build modern/traditional running shoes for my whole family and go for a run. Boy am I sore.</description>
        
        <pubDate>Sun, 26 May 2013 21:17:07 +0200</pubDate>
        <link>https://jfoucher.com/2013/05/building-and-using-minimalist-running-shoes.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2013/05/building-and-using-minimalist-running-shoes.html</guid>
        
        <category>sport</category>
        
        <category>running</category>
        
        <category>shoes</category>
        
        
      </item>
      
    
      
      <item>
        <title>Installing PHP, Apache2 and nginx for faster websites</title>
        <description>&lt;p&gt;My contract with my previous shared hosting contractor is coming to a close, and as they seem to have all but abandoned their business, I decided it was time to move away. I looked at using Amazon’s EC2, but ultimately decided to go with Bhost, with which I’m fairly happy so far. To get some decent performance out of it, I planned to use Nginx as my web server&lt;/p&gt;

&lt;h3 id=&quot;keep-using-apache-as-usual&quot;&gt;Keep using Apache as usual&lt;/h3&gt;

&lt;p&gt;All my websites are configured to work with apache, sometimes using fairly advanced rewrite rules, and a fair proportion of wordpress sites. So to save myself a ton of work I decided to just use Nginx as a proxy to apache and not reconfigure each site to use Nginx’s rewrite rules.&lt;/p&gt;

&lt;h3 id=&quot;install-required-software&quot;&gt;Install required software&lt;/h3&gt;

&lt;p&gt;I’m using Ubuntu, but the steps below should be fairly easy to adapt to your distribution of choice. To install everything from scratch, just run &lt;code class=&quot;highlighter-rouge&quot;&gt;sudo apt-get install php5 apache2 mysql-server php5-mysql nginx&lt;/code&gt;. This installs mysql, Apache, PHP and Nginx&lt;/p&gt;

&lt;h3 id=&quot;configure-apache-and-nginx&quot;&gt;Configure Apache and Nginx&lt;/h3&gt;

&lt;p&gt;I created one bash script that creates the necessary virtual hosts files for Apache and Nginx, by taking a template a doing a search/replace with sed. Here is the apache virtual host template that goes into &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/sites-available&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; *:8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;ServerAdmin&lt;/span&gt; webmaster@localhost
        &lt;span class=&quot;nc&quot;&gt;ServerName&lt;/span&gt; template
        &lt;span class=&quot;nc&quot;&gt;ServerAlias&lt;/span&gt; template www.template cdn.template cdn2.template
        &lt;span class=&quot;nc&quot;&gt;DocumentRoot&lt;/span&gt; /var/www/template
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; /var/www/template/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;All&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
                &lt;span class=&quot;nc&quot;&gt;allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;ScriptAlias&lt;/span&gt; /cgi-bin/ /usr/lib/cgi-bin/
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;/usr/lib/cgi-bin&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;                &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
                &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; +ExecCGI -MultiViews +SymLinksIfOwnerMatch
                &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; allow,deny
                &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;ErrorLog&lt;/span&gt; ${APACHE_LOG_DIR}/error.log
        &lt;span class=&quot;c&quot;&gt;# Possible values include: debug, info, notice, warn, error, crit,&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# alert, emerg.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;LogLevel&lt;/span&gt; warn
        &lt;span class=&quot;nc&quot;&gt;CustomLog&lt;/span&gt; ${APACHE_LOG_DIR}/access.log combined
        &lt;span class=&quot;nc&quot;&gt;Alias&lt;/span&gt; /doc/ &quot;/usr/share/doc/&quot;
        &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; &quot;/usr/share/doc/&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;            &lt;span class=&quot;nc&quot;&gt;Options&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;Indexes&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;MultiViews&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;FollowSymLinks&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;AllowOverride&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;None&lt;/span&gt;
            &lt;span class=&quot;nc&quot;&gt;Order&lt;/span&gt; deny,allow
            &lt;span class=&quot;nc&quot;&gt;Deny&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; all
            &lt;span class=&quot;nc&quot;&gt;Allow&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;from&lt;/span&gt; 127.0.0.0/255.0.0.0 ::1/128
        &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;Directory&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;VirtualHost&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice that Apache listens on port 8080. You need to change the port from 80 to 8080 in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/apache2/ports.conf&lt;/code&gt; as well, this is what mine looks like after the change :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-apache&quot; data-lang=&quot;apache&quot;&gt;    &lt;span class=&quot;nc&quot;&gt;NameVirtualHost&lt;/span&gt; *:8080
    &lt;span class=&quot;nc&quot;&gt;Listen&lt;/span&gt; 8080
    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_ssl.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;c&quot;&gt;# If you add NameVirtualHost *:443 here, you will also have to change&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# the VirtualHost statement in /etc/apache2/sites-available/default-ssl&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# to &amp;lt;VirtualHost *:443&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Server Name Indication for SSL named virtual hosts is currently not&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# supported by MSIE on Windows XP.&lt;/span&gt;
        &lt;span class=&quot;nc&quot;&gt;Listen&lt;/span&gt; 443
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt; mod_gnutls.c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;
&lt;/span&gt;        &lt;span class=&quot;nc&quot;&gt;Listen&lt;/span&gt; 443
    &lt;span class=&quot;p&quot;&gt;&amp;lt;/&lt;/span&gt;&lt;span class=&quot;nl&quot;&gt;IfModule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Next up is the template for the default nginx site, which is much simpler and goes in &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc/nginx/sites-available&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;    &lt;span class=&quot;k&quot;&gt;server&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;listen&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;access_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx.access.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;error_log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/log/nginx.error.log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;root&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/var/www/template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.php&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;index.html&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;server_name&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;template&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;*.template&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Real-IP&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$remote_addr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;X-Forwarded-For&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Host&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;proxy_pass&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;http://127.0.0.1:8080&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;kn&quot;&gt;location&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;~&lt;/span&gt; &lt;span class=&quot;sr&quot;&gt;/\.(ht|git)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;kn&quot;&gt;deny&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;All that does is proxy everything to apache on localhost, port 8080&lt;/p&gt;

&lt;p&gt;So, our virtual host templates are ready, and if you only have one or two sites you could copy the contents to a new file by hand and change the word &lt;code class=&quot;highlighter-rouge&quot;&gt;template&lt;/code&gt; for your actual domain name / folder, but as I had quite a few sites to convert, I created a small bash script that takes car of it for me, by just calling it with the hostname:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    &lt;span class=&quot;c&quot;&gt;#!/bin/bash&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;CMDLN_ARGS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$@&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Command line arguments for this script&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;export &lt;/span&gt;CMDLN_ARGS
    &lt;span class=&quot;c&quot;&gt;# Run this script as root if not already.&lt;/span&gt;
    chk_root &lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; ! &lt;span class=&quot;k&quot;&gt;$(&lt;/span&gt; id -u &lt;span class=&quot;k&quot;&gt;)&lt;/span&gt; -eq 0 &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;; &lt;span class=&quot;k&quot;&gt;then
       &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Please enter your password.&quot;&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;sudo su -c &lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt; &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;CMDLN_ARGS&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# Call this prog as root&lt;/span&gt;
       &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;${&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# since we're 'execing' above, we wont reach this exit&lt;/span&gt;
                  &lt;span class=&quot;c&quot;&gt;# unless something goes wrong.&lt;/span&gt;
     &lt;span class=&quot;k&quot;&gt;fi&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    chk_root
    cat /etc/apache2/sites-available/template | sed &lt;span class=&quot;s2&quot;&gt;&quot;s/template/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/g&quot;&lt;/span&gt; |cat &amp;gt; /etc/apache2/sites-available/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    ln -s /etc/apache2/sites-available/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; /etc/apache2/sites-enabled/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    cat /etc/nginx/sites-available/template | sed &lt;span class=&quot;s2&quot;&gt;&quot;s/template/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;/g&quot;&lt;/span&gt; |cat &amp;gt; /etc/nginx/sites-available/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    ln -s /etc/nginx/sites-available/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; /etc/nginx/sites-enabled/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt; -d /var/www/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;then
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;host directory exists&quot;&lt;/span&gt;;
    &lt;span class=&quot;k&quot;&gt;else
      &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;creating directory&quot;&lt;/span&gt;
      mkdir &lt;span class=&quot;s2&quot;&gt;&quot;/var/www/&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;fi
    &lt;/span&gt;chown -R www-data:www-data /var/www/&lt;span class=&quot;nv&quot;&gt;$1&lt;/span&gt;
    /etc/init.d/apache2 restart
    /etc/init.d/nginx restart&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Put this say in your home folder and give it executable permission with &lt;code class=&quot;highlighter-rouge&quot;&gt;chmod 755 new_host&lt;/code&gt; or whatever you named the file.&lt;/p&gt;

&lt;p&gt;Then run it with &lt;code class=&quot;highlighter-rouge&quot;&gt;./new_host example.com&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This will create a folder in &lt;code class=&quot;highlighter-rouge&quot;&gt;/var/www/example.com&lt;/code&gt;, copy the updated template virtual host configuration to the required location and restart apache and nginx.&lt;/p&gt;

&lt;p&gt;Now put some content in that folder and configure your mysql connection if neccesary&lt;/p&gt;

&lt;p&gt;You should now be able to browse to example.com and see your brand new site. Some quick benchmarking with ab gives roughly a tenfold increase in requests per second, depending on the configuration of the website itself&lt;/p&gt;

&lt;p&gt;These are some rough numbers for &lt;a href=&quot;http://6px.eu&quot;&gt;Six Pixels&lt;/a&gt;, built with Kohana2 without any caching mechanism&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;ab -c20 -n200 http://6px.eu:8080/&lt;/code&gt; is hitting Apache on port 8080&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server Hostname:        6px.eu
Server Port:            8080

Document Path:          /
Document Length:        12101 bytes

Concurrency Level:      20
Time taken for tests:   282.679 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      2486000 bytes
HTML transferred:       2420200 bytes
Requests per second:    0.71 [#/sec] (mean)
Time per request:       28267.940 [ms] (mean)
Time per request:       1413.397 [ms] (mean, across all concurrent requests)
Transfer rate:          8.59 [Kbytes/sec] received
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now with nginx &lt;code class=&quot;highlighter-rouge&quot;&gt;ab -c20 -n200 http://6px.eu/&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server Hostname:        6px.eu
Server Port:            80

Document Path:          /
Document Length:        12081 bytes

Concurrency Level:      20
Time taken for tests:   40.606 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      2482000 bytes
HTML transferred:       2416200 bytes
Requests per second:    4.93 [#/sec] (mean)
Time per request:       4060.612 [ms] (mean)
Time per request:       203.031 [ms] (mean, across all concurrent requests)
Transfer rate:          59.69 [Kbytes/sec] received
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h3 id=&quot;update&quot;&gt;Update:&lt;/h3&gt;

&lt;p&gt;As rightly noted by &lt;a href=&quot;https://twitter.com/#!/arnaud_lb/status/196610128261296129&quot;&gt;@arnaud_lb&lt;/a&gt; the benchmarks should give nearly the same results,
as nginx is waiting for Apache to return it’s data before sending it along.
What happened in those benchmarks is that &lt;a href=&quot;http://cloudflare.com&quot;&gt;cloudflare.com&lt;/a&gt; (highly recommended by the way) was caching some results and not others.&lt;/p&gt;

&lt;p&gt;When I tried on localhost, the results were effectively the same.
So the way to get better performance is to get nginx to cache the results from apache, by adding the following to your nginx virtual host definition :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;    &lt;span class=&quot;k&quot;&gt;proxy_cache&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;one&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_cache_use_stale&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;error&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;timeout&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;invalid_header&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;updating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_cache_key&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$scheme$host$request_uri&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_cache_valid&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;301&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;302&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_cache_valid&lt;/span&gt;       &lt;span class=&quot;mi&quot;&gt;404&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_cache_valid&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;any&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where the &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_cache&lt;/code&gt; named &lt;code class=&quot;highlighter-rouge&quot;&gt;one&lt;/code&gt; is defined in nginx.conf as such :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;    &lt;span class=&quot;k&quot;&gt;proxy_cache_path&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;/usr/local/nginx/proxy&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;levels=1:2&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;keys_zone=one:15m&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;inactive=7d&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;max_size=1000m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;proxy_cache_valid&lt;/code&gt; entries above define different cache times for various response codes&lt;/p&gt;

&lt;p&gt;And here are the real benchmarks :&lt;/p&gt;

&lt;h4 id=&quot;apache&quot;&gt;Apache:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server Hostname:        direct.6px.eu
Server Port:            8080

Document Path:          /
Document Length:        11487 bytes

Concurrency Level:      10
Time taken for tests:   15.082 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      2338600 bytes
HTML transferred:       2297400 bytes
Requests per second:    13.26 [#/sec] (mean)
Time per request:       754.075 [ms] (mean)
Time per request:       75.408 [ms] (mean, across all concurrent requests)
Transfer rate:          151.43 [Kbytes/sec] received
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;nginx&quot;&gt;Nginx:&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Server Hostname:        direct.6px.eu
Server Port:            80

Document Path:          /
Document Length:        3031 bytes

Concurrency Level:      10
Time taken for tests:   0.027 seconds
Complete requests:      200
Failed requests:        0
Write errors:           0
Total transferred:      654600 bytes
HTML transferred:       606200 bytes
Requests per second:    7305.94 [#/sec] (mean)
Time per request:       1.369 [ms] (mean)
Time per request:       0.137 [ms] (mean, across all concurrent requests)
Transfer rate:          23351.88 [Kbytes/sec] received
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Just, wow…&lt;/p&gt;

&lt;p&gt;Careful though as this will wreak havoc on your sessions, at the minimum you can disable caching for logged-in users with&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-nginx&quot; data-lang=&quot;nginx&quot;&gt;    &lt;span class=&quot;k&quot;&gt;proxy_cache_bypass&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;proxy_no_cache&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$cookie_session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;session&lt;/code&gt; is the name of your cookie&lt;/p&gt;
</description>
        
          <description>I recently decided to go with a small VPS for some of my sites, and to get decent performance without too much work I used Nginx as a proxy to Apache2.</description>
        
        <pubDate>Mon, 23 Apr 2012 08:17:07 +0200</pubDate>
        <link>https://jfoucher.com/2012/04/installing-apache-php-and-nginx-for-faster-websites.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2012/04/installing-apache-php-and-nginx-for-faster-websites.html</guid>
        
        <category>webdev</category>
        
        <category>php</category>
        
        <category>server admin</category>
        
        
      </item>
      
    
      
      <item>
        <title>Import contacts from Google by entering your email and password</title>
        <description>&lt;p&gt;What I wanted to do was something similar to what Dropbox does for their referral program: Allow the user to input their email and password, show them a list of their contacts and allow them to select who to invite. The invited contacts’ emails would then be saved directly to database and an email sent to them.&lt;/p&gt;

&lt;p&gt;This is what google calls the &lt;a href=&quot;https://developers.google.com/accounts/docs/AuthForInstalledApps#Using&quot;&gt;ClientLogin&lt;/a&gt; method of authentication. It allow your user to simply input their username and password and see a list of their contacts displayed, where they can select which ones to invite, in this case.&lt;/p&gt;

&lt;p&gt;The way to do that is pretty easy, first we have to make a POST request to google to get an authentification token for the subsequent authenticated requests. I chose to use the &lt;a href=&quot;https://github.com/kriswallsmith/Buzz&quot;&gt;Buzz PHP library&lt;/a&gt; as my HTTP client. It makes everything easy and removes the necessity of countless &lt;code class=&quot;highlighter-rouge&quot;&gt;curl_set_opts()&lt;/code&gt;. Buzz requires PHP 5.3, but I’m using Symfony2 which also does, so that’s not a problem, actually more of a boon as I find PHP5.3 code generally cleaner.&lt;/p&gt;

&lt;p&gt;I created a class &lt;code class=&quot;highlighter-rouge&quot;&gt;Importer&lt;/code&gt; with a protected variable &lt;code class=&quot;highlighter-rouge&quot;&gt;$browser&lt;/code&gt; which is the Buzz\Browser instance we’ll be using to connect to google. Google returns the data in a line based format, so I used a little helper function to convert it to a PHP array:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unserializeGoogleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;trim&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;continue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;explode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;=&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$line&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$v&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So first we need to get the auth token from google:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'accountType'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'HOSTED_OR_GOOGLE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Email'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'Passwd'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'password'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'service'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'cp'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;'source'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'mention-web-1.0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://www.google.com/accounts/ClientLogin'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;http_build_query&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unserializeGoogleData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Where &lt;code class=&quot;highlighter-rouge&quot;&gt;$data['email']&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;$data['password']&lt;/code&gt; are the user’s email and password, respectively.&lt;/p&gt;

&lt;p&gt;If everything went fine, the &lt;code class=&quot;highlighter-rouge&quot;&gt;$returns&lt;/code&gt; variable now contains an associative array with a key &lt;code class=&quot;highlighter-rouge&quot;&gt;Auth&lt;/code&gt;, so we can proceed with the next step, actually getting the contacts:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$feed_url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://www.google.com/m8/feeds/contacts/&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;urlencode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;
            &lt;span class=&quot;s2&quot;&gt;&quot;/full?alt=json&amp;amp;max-results=500&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;s1&quot;&gt;'Authorization: GoogleLogin auth='&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$returns&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Auth'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$feed_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$header&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getContent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;//return $r;
&lt;/span&gt;        &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'feed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'feed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;array_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gd$email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
                    &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'gd$email'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'address'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;isset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])){&lt;/span&gt;
                        &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'name'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$el&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'title'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'$t'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
                    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'feed'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'entry'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the user and password were incorrect, the &lt;code class=&quot;highlighter-rouge&quot;&gt;Auth&lt;/code&gt; key will not be present in the array, and so we simply return &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt;. It is recommended to see if Google requires the user to solve a catcha, in which case it should be displayed. But as that was not necessary in this case, it will be left as an exercise for the reader.
On the other hand, if everything was ok, the &lt;code class=&quot;highlighter-rouge&quot;&gt;$results&lt;/code&gt; array is now populated with the user’s contacts, so the next step is to walk over the array extracting the data we need, in this case only the main email and the full name of the contact. We populate an array with the required data and simply return it for the caller to use.&lt;/p&gt;

&lt;p&gt;I hope this will be useful to someone, but please note that Google &lt;a href=&quot;https://developers.google.com/accounts/docs/AuthForInstalledApps&quot;&gt;recommends&lt;/a&gt; you use OAuth for that kind of things.&lt;/p&gt;

</description>
        
          <description>In some sites like for example Dropbox, you invite people from your Gmail contacts by simply entering your email and password: this is how it's done.</description>
        
        <pubDate>Sun, 15 Apr 2012 09:17:07 +0200</pubDate>
        <link>https://jfoucher.com/2012/04/getting-your-users-gmail-contacts.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2012/04/getting-your-users-gmail-contacts.html</guid>
        
        <category>webdev</category>
        
        <category>php</category>
        
        <category>google</category>
        
        
      </item>
      
    
      
      <item>
        <title>Git tips from stackoverflow</title>
        <description>&lt;p&gt;Here are some pretty cool and very useful git tricks I learnt  by searching or reading stackoverflow.
Most of them are operations that should be pretty easy to do, and seem pointlessly complicated. The second one is an excellent example of both the flexibility and the lack of user friendliness of the git UI&lt;/p&gt;

&lt;h3 id=&quot;prevent-a-file-from-being-commited-ever&quot;&gt;Prevent a file from being commited, ever&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/8485503/210824&quot;&gt;Git: Never Commit Changed Files (But still keep original revisioned.)&lt;/a&gt;&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git update-index --assume-unchanged &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To make it commitable again run&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git update-index --no-assume-unchanged &amp;lt;file&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h3 id=&quot;commits-no-yet-pushed&quot;&gt;Commits no yet pushed&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/a/3338774/210824&quot;&gt;Viewing Unpushed Git Commits&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to see all commits on all branches that aren’t pushed yet, you might be looking for something like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git log --branches --not --remotes&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;And if you only want to see the most recent commit on each branch, and the branch names, this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;    git log --branches --not --remotes --simplify-by-decoration --decorate --oneline&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;
</description>
        
          <description>Sometimes git is confusing, and things that should be simple quickly look like magic incantations. Here are two such cases.</description>
        
        <pubDate>Mon, 09 Apr 2012 00:00:00 +0200</pubDate>
        <link>https://jfoucher.com/2012/04/github-tricks-from-stackoverflow.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2012/04/github-tricks-from-stackoverflow.html</guid>
        
        <category>webdev</category>
        
        <category>php</category>
        
        <category>git</category>
        
        
      </item>
      
    
      
      <item>
        <title>From Titanium to Adobe Air, or, Building Desktop Apps with Javascript</title>
        <description>&lt;p&gt;&lt;a href=&quot;http://vessenger.com&quot;&gt;Vessenger&lt;/a&gt; is an app that allows closed groups such as
organizations, to chat and send documents to each other or to a central
repository. People can be divided in groups so that they can share status
updates or documents with just the required people. In some ways it is similar
to yammer, but was to be based primarily on a desktop app.&lt;/p&gt;

&lt;h3 id=&quot;we-decide-to-use-titanium&quot;&gt;We decide to use Titanium&lt;/h3&gt;

&lt;p&gt;After some brainstorming with the company owner, we decided that we’d make the
app available cross platform, and at least for Mac OSX and Windows. I
personally use Linux, so I also wanted to make sure that it would work on Linux
as well.  Developping two or three native apps was not a viable option, so we
decided to use a framework that would allow us to use HTML and Javascript, such
as Titanium and Adobe Air. Titanium looked like it had great support from the
community, is Open source and actively developped, so we went with that.&lt;/p&gt;

&lt;p&gt;Developing in Titanium takes some getting used to, but is not much different to
building javascript heavy web applications. Initially, an index.html file is
loaded by Titanium, in which we load all the required javascript files. At
first I had everything in one big and quickly growing javascript file, which
although properly namespaced, was really giving me headaches just to move
around. So I split it up in several smaller files, by functionality, as I
should have done since the beginning.&lt;/p&gt;

&lt;p&gt;Working in Titanium can be frustrating at times, and although it works pretty
well, I had to spend a lot of time looking through the documentation. After
some time, I realized that the docs for Tianium are not easy to understand, not
particularly friendly and sometimes even incomplete.&lt;/p&gt;

&lt;p&gt;I started working on &lt;a href=&quot;http://vessenger.com&quot;&gt;Vessenger&lt;/a&gt; by doing most of the UI,
the status message sending and retrieving, and getting a basic version of the
chat feature working for demo purposes. The status updates was the easiest one
to build, and I added the possibility to upload files within you status update.
They can be any type of files, with images showing a thumbnail when seen by
your colleagues. All the files live on &lt;a href=&quot;http://vessenger.com&quot;&gt;Vessenger&lt;/a&gt;’s
servers, which makes it very easy to retrieve information at a later date, just
by looking at your (infinite) chat or status history.&lt;/p&gt;

&lt;h3 id=&quot;switching-to-adobe-air&quot;&gt;Switching to Adobe Air&lt;/h3&gt;

&lt;p&gt;I then started working on the chat feature, which is where we noticed an issue
with the repeated server polling we were doing: as well as being suboptimal on
the server side, the was also a memory leak on the client side, which seemd to
be caused by Titanium not properly closing and/or releasing the connection
object, a problem compouded by the fact that Titanium has no method for
explicitely closing a remote connection. As I was connecting to the server
several times per second, the memory footprint of the application grew fairly
quickly. After a lot a frustration trying to make it right, we decided the
problem lay with Titanium and decided to switch to Adobe Air. Regretfully, the
latest Air version is not supported on Linux anymore, but it’s possible to make
the app the app compatible with Air 2.6 to get it to run properly on linux.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The memory used by the app could climb to 600Mb overnight…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The switch to Adobe air did not involve the complete rewrite I feared, as most
of the code is compatible and I had created some abstractions for things like
connecting to the API and storing data. Nevertheless, EncryptedLocalStorage is
great: very easy to use and has all the features needed. My only problem with
Adobe Air was the way it handled cookies: it basically did not, so I had to
create that from scratch, storing the cookies in EcryptedLocalStorage and
sending it explicitely with each and every request. In hindsight I should have
setup a dedicated server with node.js to talk to the API, and socket.io to talk
between the desktop app and the node server. I am actually implementing this
solution now for another project and I think it would be a perfect fit for
&lt;a href=&quot;http://vessenger.com&quot;&gt;Vessenger&lt;/a&gt; as well.&lt;/p&gt;

&lt;h3 id=&quot;sort-issues-caused-by-titanium&quot;&gt;Sort issues caused by Titanium&lt;/h3&gt;

&lt;p&gt;So by a combination of moving to Air and reducing the polling frequency for the
things that did not need to be refreshed so often, I managed to eliminate the
memory leak. Development could then continue as previously planned: I
integrated &lt;a href=&quot;http://vessenger.com/snaplr&quot;&gt;Snaplr&lt;/a&gt; in the file upload dialogs,
allowing the user to easily take a screenshot, annotate it and upload it along
along with his message, to be seen instantly by the people he is chatting with.
For me this is one of the killer features of &lt;a href=&quot;http://vessenger.com&quot;&gt;Vessenger&lt;/a&gt;&lt;/p&gt;

</description>
        
          <description>My experience using Titanium to build a desktop app.</description>
        
        <pubDate>Mon, 13 Feb 2012 00:00:00 +0100</pubDate>
        <link>https://jfoucher.com/2012/02/from-titanium-to-air-building-desktop-apps-with-javascript.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2012/02/from-titanium-to-air-building-desktop-apps-with-javascript.html</guid>
        
        <category>javascript,</category>
        
        <category>titanium,</category>
        
        <category>adobe-air</category>
        
        
      </item>
      
    
      
      <item>
        <title>Implementing BrowserID identification on your website</title>
        <description>&lt;p&gt;BrowserID &lt;a href=&quot;http://identity.mozilla.com/post/7616727542/introducing-browserid-a-better-way-to-sign-in&quot;&gt;was released a few months ago&lt;/a&gt; and is a new way to sign in to websites or web applications that doesn’t require you to give your password each time you want to login. It doesn’t even require you to register as such on each website. In that way, it is very similar to openId, but without the usability issues.&lt;/p&gt;

&lt;p&gt;For developpers, Mozilla set up a service that provides everything you need to let your users simply login without handling any of the dirty work yourself. &lt;a href=&quot;http://browserid.org&quot;&gt;http://browserid.org&lt;/a&gt; is an identity provider that allows your users to create and manage their accounts across the web. One account for an infinite number of websites. Could this finally be our &lt;a href=&quot;http://www.codinghorror.com/blog/2010/11/your-internet-drivers-license.html&quot;&gt;universal login mechanism&lt;/a&gt;?&lt;/p&gt;

&lt;p&gt;###&lt;a href=&quot;https://github.com/mozilla/browserid/wiki/How-to-Use-BrowserID-on-Your-Site&quot;&gt;Implementing BrowserID&lt;/a&gt; on your site or app is easy&lt;/p&gt;

&lt;h4 id=&quot;include-the-following-javascript-snippet-in-your-page&quot;&gt;Include the following javascript snippet in your page&lt;/h4&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://browserid.org/include.js&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;identify-the-user&quot;&gt;Identify the user&lt;/h4&gt;

&lt;p&gt;When the user clicks on your “Login” button, a window pops up asking them to confirm that they want to login, or asking them to create a browserID account if they haven’t done it yet. Once they decide that they want to login, they are redirected to your site, and the following function is called, with the assertion being passed to the callback if the login was successful&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;nx&quot;&gt;navigator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;getVerifiedEmail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// This code will be invoked once the user has successfully&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// selected an email address they control to sign in with.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// something went wrong!  the user isn't logged in.&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If the assertion is there, the user authenticated successfully. now you must verify that the assertion really is authentic, and get the relevant data from it. You &lt;em&gt;could&lt;/em&gt; &lt;a href=&quot;https://wiki.mozilla.org/Identity/Verified_Email_Protocol/Latest&quot;&gt;do it yourself&lt;/a&gt;, but if you don’t have any special requirements, I recommend you just use the service provided by &lt;a href=&quot;http://browserid.org&quot;&gt;http://browserid.org&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;verify-the-assertion&quot;&gt;Verify the assertion&lt;/h4&gt;

&lt;p&gt;To do so, and once you have the &lt;code class=&quot;highlighter-rouge&quot;&gt;assertion&lt;/code&gt;, you have to make a POST request to &lt;a href=&quot;http://browserid.org/verify&quot;&gt;http://browserid.org/verify&lt;/a&gt;, with two parameters: the assertion and the audience, which is simply the hostname of your site. This has to be done from your server. For security reasons, it won’t work if you do it as an ajax request from the user’s browser. What I suggest is that you call a url on your server from the javascript callback which will be in charge of itself making the request to browserid.org. Do it as a POST request as that assertion is a &lt;em&gt;long&lt;/em&gt; string. This an example implementation for the &lt;a href=&quot;http://www.slimframework.com/&quot;&gt;Slim framework&lt;/a&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-php&quot; data-lang=&quot;php&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
    &lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'/browserid'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nv&quot;&gt;$assertion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'assertion'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//get the POSTed assertion
&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;$post_data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'assertion'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$assertion&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'audience'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SERVER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//SERVER is my site's hostname
&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;post&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'https://browserid.org/verify'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$post_data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;//This makes a post request to browserid.org
&lt;/span&gt;            &lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;json_decode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'okay'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
                &lt;span class=&quot;nx&quot;&gt;handle_users&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;c1&quot;&gt;//This logs the user in if we have an account for that email address,
&lt;/span&gt;                &lt;span class=&quot;c1&quot;&gt;//or creates it otherwise
&lt;/span&gt;            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Could not log you in'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;json_encode&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'message'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'status'&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$status&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;cp&quot;&gt;?&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This call to the browserID API returns some json_encoded stuff, for example something like this :&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;status&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;okay&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;email&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;lloyd@example.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;audience&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;https://mysite.com&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;expires&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1308859352261&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s2&quot;&gt;&quot;issuer&quot;&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;browserid.org&quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h4 id=&quot;login-or-register&quot;&gt;Login or register&lt;/h4&gt;

&lt;p&gt;If you don’t get anything, or the status is not okay, something failed. Otherwise, great, your user just asked to be logged in! (or registered)&lt;/p&gt;

&lt;p&gt;If the status was “okay”, you then need to proceed to login your user (set session varibles, or whatever…) or register them (create an account in your database and then log them in)&lt;/p&gt;

&lt;p&gt;The data returned is very basic, but allows you to check whether that user already has an account or your site or not. You are then free to ask them for additional data, such as their name, date of birth, etc…&lt;/p&gt;

&lt;p&gt;And that’s it! I’m really happy because now I can forget about email address verification, lost passwords and all the annoying stuff that having actual users imply. Let someone else do the hard work is what I say!! Especially when it integrates so well everywhere.&lt;/p&gt;

&lt;p&gt;Oh by the way, there’s a &lt;a href=&quot;http://wordpress.org/extend/plugins/browserid/&quot;&gt;Wordpress plugin&lt;/a&gt; for that&lt;/p&gt;
</description>
        
          <description>BrowserID is an identification service from Mozilla that aims to remove the need for accounts at each website we visit. I explain how to implement it on your site.</description>
        
        <pubDate>Sun, 25 Dec 2011 14:05:13 +0100</pubDate>
        <link>https://jfoucher.com/2011/12/implementing-browserid-identification.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2011/12/implementing-browserid-identification.html</guid>
        
        <category>webdev</category>
        
        <category>php</category>
        
        
      </item>
      
    
      
      <item>
        <title>A 10 minute script to graph your server load</title>
        <description>&lt;p&gt;This is a quick and dirty PHP script that I whipped up in about 10 minutes, used to show the load averages on the server where it is uploaded.&lt;/p&gt;

&lt;p&gt;Here are the load curves for the server that hosts most of my websites at the moment. It is an overworked shared server, which explains why all the curves are through the roof…&lt;/p&gt;

&lt;iframe src=&quot;http://xiilo.com/uptime.php&quot; width=&quot;650&quot; height=&quot;450&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;The load is updated every minute with a crontab that calls this same script.&lt;/p&gt;

&lt;p&gt;The visualization is done using the Google chart API, which does require javascript but offers some great chart options, the “annotatedtimeline” being especially suitable to my purpose.&lt;/p&gt;

&lt;p&gt;&lt;a title=&quot;server load graph on github&quot; href=&quot;https://github.com/jfoucher/Server-load-graph&quot; target=&quot;_blank&quot;&gt;Get the source on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://jfoucher.com/projects/serverload.html&quot;&gt;installation and project details&lt;/a&gt;&lt;/p&gt;
</description>
        
          <description>I needed to monitor the load on my web server like, right &lt;strong&gt;now&lt;/strong&gt;, so I wrote this script.</description>
        
        <pubDate>Sat, 17 Sep 2011 01:09:13 +0200</pubDate>
        <link>https://jfoucher.com/2011/09/a-10-minute-script-to-graph-your-server-load.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2011/09/a-10-minute-script-to-graph-your-server-load.html</guid>
        
        <category>sysadmin</category>
        
        <category>php</category>
        
        
      </item>
      
    
      
      <item>
        <title>Moving from Wordpress to Jekyll and Github</title>
        <description>&lt;p&gt;The web server where my blog was hosted seemed to slow down by the day, and I’m looking for ways to move some stuff out of the way. I had heard of github pages, that allow one to host a static site for free, on a url like &lt;a href=&quot;http://jfoucher.github.com&quot;&gt;http://jfoucher.github.com&lt;/a&gt;. Git hub recently added the abilily to do a CNAME (kind of a DNS reidrect) from a custom domain name to a gituhub page.&lt;/p&gt;

&lt;p&gt;The last element that decided me in favor of this setup is jekyll, a static site generator written in ruby. You write your posts in markdown, type “jekyll” on the command line, and your site is generated in a few seconds.&lt;/p&gt;

&lt;p&gt;Afterwards, just commit and push to github, and voilà, your site is live!&lt;/p&gt;
</description>
        
          <description>I stopped using Wordpress for this blog a long time ago. This is how I did it.</description>
        
        <pubDate>Sat, 27 Aug 2011 00:00:00 +0200</pubDate>
        <link>https://jfoucher.com/2011/08/moving-to-jekyll-and-github.html</link>
        <guid isPermaLink="true">https://jfoucher.com/2011/08/moving-to-jekyll-and-github.html</guid>
        
        <category>webdev</category>
        
        <category>ruby</category>
        
        <category>github</category>
        
        
      </item>
      
    
  </channel>
</rss>
